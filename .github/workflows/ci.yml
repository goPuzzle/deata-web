name: CI

on:
  - push

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
      
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.tool-versions'
      
      - name: Cache Dependencies
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-modules-

      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      
      - name: Type Check
        run: npm run check-types

      - name: Check Lint
        run: npm run lint


  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 5

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.tool-versions'
        

      - name: Cache Dependencies
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-modules-

      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_NEXT_PUBLIC_NAMESPACE_ENV: production
          envkey_NEXT_PUBLIC_COMMIT_SHA: ${{ github.sha }}
          file_name: .env

      - name: Build script
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GH_ACTIONS_GLOBAL_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GH_ACTIONS_GLOBAL_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Upload script to s3
        run: |
          aws s3 cp \
            .next s3://next-js-build-bucket/dae-ta/${{ github.sha }}/_next \
            --recursive \
            --region us-east-2 \
            --acl public-read
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.GH_ACTIONS_GLOBAL_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.GH_ACTIONS_GLOBAL_AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: 034360777894.dkr.ecr.us-east-2.amazonaws.com/daeta-web:${{ github.sha }}

  # deploy:
  #   name: Deploy ECS
  #   runs-on: ubuntu-latest
  #   needs: [lint, build]
  #   steps:
  #     - name: Render Amazon ECS task definition
  #       id: render-web-container
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: './task-definition.json'
  #         container-name: daeta-web-container
  #         image: amazon/034360777894.dkr.ecr.us-east-1.amazonaws.com/daeta-web:${{ github.sha }}
  #         environment-variables: "LOG_LEVEL=info"

  #     - name: Deploy to Amazon ECS service
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.render-web-container.outputs.task-definition }}
  #         service: daeta-web-service
  #         cluster: daeta-webg-cluster

          